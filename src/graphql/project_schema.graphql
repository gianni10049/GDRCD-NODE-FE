# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AccountConnected {
    chactersListByAccount: [characterData]
    getCharacter(characterId: ID): characterData
    getCharactersList: [characterData]
    getMe: getMeResponse
    listAbilities: [abilityData]
}

type AccountConnectedMutation {
    createCharacter(age: Int!, name: String!, surname: String!): genericResponse
    setCharacter(characterId: ID!): loginResponse
}

type CharacterConnected {
    getAbility(abilityId: ID!, characterId: ID): abilityData
    getCharDamageByPart(characterId: ID!, partId: ID!): getDamagesResponse
    getCharacterAbility(characterId: ID!): getCharacterAbilityResponse
    getCharacterActionPercentages(action: String, characterId: ID!): getCharacterActionPercentagesResponse
    getCharacterPoints(characterId: ID!): getCharacterPointsResponse
    getCharacterStats(characterId: ID!): getCharacterStatsResponse
    getDamage(damageId: ID!): getDamageResponse
    getForums: [forumsData]
    getFrequencies: [radioFrequenciesData]
    getFrequencyMessages(frequency: Int!): getFrequencyMessagesResponse
    getGroup(id: ID!): groupData
    getGroups: [groupData]
    getMarketBuyList: [marketData]
    getMessages(recipient: ID!, type: String!): [messagesData]
    getMessagesSenders: [messagesData]
    getObjectData(id: ID!): objectsData
    getObjectListData(id: ID!): objectsListData
    getPartsList(characterId: ID!): getPartsList
    getPost(page: Int!, post: ID!): ForumsPostDataResponse
    getPosts(forum: ID!, page: Int!): ForumsPostListResponse
    isMineCharacter(characterId: ID!): genericResponse
    listStats: [statData]
    permissionControl(permission: String!): genericResponse
}

type CharacterConnectedMutation {
    deleteConv(sender: ID!, type: String!): genericResponse
    deleteMessage(message: ID!): [messagesData]
    marketBuyItem(id: ID!): marketBuyItemResponse
    newComment(post: ID!, text: String!): ForumsPostDataResponse
    newPost(forum: ID!, text: String!, title: String!): ForumsPostListResponse
    sendFrequencyMessage(frequency: Int!, text: String!): [radioMessagesData]
    sendMessage(recipient: ID!, text: String!, type: String!): [messagesData]
    sendMoney(character: ID!, money: String!): genericResponse
    setDamageSolved(damageId: ID!): getDamageResponse
    updateAbility(abilityId: ID!, characterId: ID): genericResponse
    updatePostClose(post: ID!): ForumsPostDataResponse
    updatePostImportant(post: ID!): ForumsPostDataResponse
    upgradeStat(character: ID!, stat: ID!): genericResponse
}

type ForumsPostDataResponse {
    post: forumsPostsData
    total_pages: Int!
    total_results: Int!
}

type ForumsPostListResponse {
    posts: [forumsPostsData]
    total_pages: Int!
    total_results: Int!
}

type Mutation {
    accountConnectedMutation(token: String!): AccountConnectedMutation
    characterConnectedMutation(token: String!): CharacterConnectedMutation
    registration(email: String!, password: String!, password_confirm: String!, username: String!): genericResponse
}

type Query {
    accountConnected(token: String!): AccountConnected
    characterConnected(token: String!): CharacterConnected
    login(password: String!, username: String!): loginResponse
    recPass(email: String!): toastResponse
    routeControl(account_needed: Boolean, character_needed: Boolean, token: String!): genericResponse
}

type abilityData {
    abilityToDetailData: [abilityDetailData]
    castable: Boolean
    characterAbilityData: [characterAbilityData]
    createdAt: String
    createdBy: Int
    deletedAt: String
    description: descriptionsArray
    icon: String
    id: ID
    max_level: Int
    name: String
    stat: ID
    statData: statData
    updatedAt: String
    visible: Boolean
}

type abilityDetailData {
    ability: Int
    abilityData: abilityData
    bonus: Int
    createdAt: String
    createdBy: Int
    deletedAt: String
    description: descriptionsArray
    id: ID
    level: Int
    price: Int
    updatedAt: String
}

type accountData {
    active: Boolean
    charactersData: characterData
    createdAt: String
    deletedAt: String
    email: String
    id: ID
    password: String
    updatedAt: String
    username: String
}

type accountPermissionData {
    account: Int
    accountData: accountData
    assigned_by: Int
    createdAt: String
    deletedAt: String
    id: ID
    permission: Int
    permissionData: permissionData
    updatedAt: String
}

type accountPermissionGroupData {
    account: Int
    createdAt: String
    deletedAt: String
    group: Int
    id: ID
    permissionGroupsData: permissionGroupData
    updatedAt: String
}

type authData {
    account: accountData
    character: characterData
}

type characterAbilityData {
    ability: Int
    abilityData: abilityData
    character: Int
    characterData: characterData
    createdAt: String
    deletedAt: String
    id: ID
    updatedAt: String
    value: Int
}

type characterDamageData {
    character: ID
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    part: ID
    partData: partsData
    points: Int
    solved: Boolean
    title: String
    updatedAt: String
}

type characterData {
    account: Int
    active: Boolean
    age: Int
    characterPermissionData: characterPermissionData
    characterPoints: characterPointsData
    createdAt: String
    deletedAt: String
    fullname: String
    id: ID
    mini_avatar: String
    name: String
    nickname: String
    profilePic: String
    surname: String
    updatedAt: String
}

type characterPermissionData {
    assigned_by: Int
    character: Int
    createdAt: String
    deletedAt: String
    id: ID
    permission: Int
    updatedAt: String
}

type characterPointsData {
    character: ID
    createdAt: String
    deletedAt: String
    exp_total: Int
    exp_usable: Int
    id: ID
    life: Int
    resources: Int
    stamina: Int
    stat_points: Int
    updatedAt: String
    weight: Int
}

type characterStatData {
    character: Int
    characterData: characterData
    createdAt: String
    deletedAt: String
    id: ID
    stat: Int
    statData: statData
    updatedAt: String
    value: Int
}

type descriptionsArray {
    eng: String
    it: String
}

type forumsCategoriesData {
    createdAt: String
    deletedAt: String
    id: ID
    order: Int
    title: String
    updatedAt: String
}

type forumsCommentsData {
    character: ID
    characterData: characterData
    createdAt: String
    deletedAt: String
    id: ID
    post: ID
    text: String
    updatedAt: String
}

type forumsData {
    category: Int
    categoryData: forumsCategoriesData
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    logo: String
    name: String
    to_read: Boolean
    total_pages: Int
    total_results: Int
    type: String
    updatedAt: String
    visible: Boolean
}

type forumsPostsData {
    character: ID
    characterData: characterData
    closed: Boolean
    commentsData: [forumsCommentsData]
    createdAt: String
    deletedAt: String
    forum: ID
    id: ID
    important: Boolean
    readsData: [forumsReadsData]
    text: String
    title: String
    to_read: Boolean
    updatedAt: String
    visible: Boolean
}

type forumsReadsData {
    character: ID
    createdAt: String
    deletedAt: String
    id: ID
    post: ID
    updatedAt: String
}

type genericResponse {
    response: Boolean!
    responseStatus: String!
}

type getCharacterAbilityResponse {
    response: Boolean
    responseStatus: String
    table: [abilityData]
}

type getCharacterActionPercentagesResponse {
    character: ID!
    percentages: percentagesArray
    response: Boolean
    responseStatus: String
}

type getCharacterPointsResponse {
    response: Boolean
    responseStatus: String
    table: characterPointsData
}

type getCharacterStatsResponse {
    response: Boolean
    responseStatus: String
    table: [statData]
}

type getDamageResponse {
    damage: characterDamageData
    response: Int
    responseStatus: String
}

type getDamagesResponse {
    damages: [characterDamageData]
    response: Int
    responseStatus: String
}

type getFrequencyMessagesResponse {
    frequency: radioFrequenciesData
    messages: [radioMessagesData]
    response: Boolean
    responseStatus: String
}

type getMeResponse {
    me: authData
    response: Int
    responseStatus: String
}

type getPartsList {
    response: Int
    responseStatus: String
    table: [partsData]
}

type groupData {
    createdAt: String
    deletedAt: String
    description: String
    external_url: String
    groupTypeData: groupsTypes
    id: ID
    logo: String
    name: String
    rolesData: [groupsRoles]
    type: ID
    updatedAt: String
    visible: Boolean
}

type groupsMembers {
    character: ID
    createdAt: String
    deletedAt: String
    id: ID
    manager: Boolean
    memberData: characterData
    role: ID
    rolesData: groupsRoles
    updatedAt: String
}

type groupsRoles {
    createdAt: String
    deletedAt: String
    description: String
    earn: Int
    group: ID
    groupData: groupData
    groupMembers: [groupsMembers]
    id: ID
    logo: String
    name: String
    updatedAt: String
    visible: Boolean
}

type groupsTypes {
    createdAt: String
    deletedAt: String
    description: String
    groupData: [groupData]
    id: ID
    logo: String
    name: String
    updatedAt: String
}

type logMailData {
    attachment: String
    createdAt: String
    deletedAt: String
    from: String
    html: String
    id: ID
    subject: String
    text: String
    to: String
    updatedAt: String
}

type loginResponse {
    response: String!
    responseStatus: String!
    token: String
}

type marketBuyItemResponse {
    list: [marketData]
    response: Boolean
    responseStatus: String
}

type marketData {
    createdAt: String
    deletedAt: String
    id: ID
    object: ID
    objectData: objectsData
    remained: Int
    total: Int
    updatedAt: String
}

type messagesData {
    createdAt: String
    deleteData: [messagesDeleteData]
    deletedAt: String
    group: ID
    id: ID
    new_off: Boolean
    new_on: Boolean
    readData: [messagesReadData]
    recipient: ID
    recipientData: characterData
    sender: ID
    senderData: characterData
    text: String
    updatedAt: String
}

type messagesDeleteData {
    character: ID
    createdAt: String
    deletedAt: String
    id: ID
    message: ID
    updatedAt: String
}

type messagesReadData {
    character: ID
    createdAt: String
    deletedAt: String
    id: ID
    message: ID
    updatedAt: String
}

type objectQualitiesData {
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    name: String
    updatedAt: String
}

type objectStatusData {
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    name: String
    updatedAt: String
}

type objectTypeData {
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    name: String
    updatedAt: String
}

type objectsData {
    charges: Int
    concealable: Boolean
    creatable: Boolean
    createdAt: String
    createdBy: Int
    cumulative: Boolean
    customizable: Boolean
    deletedAt: String
    description: String
    droppable: Boolean
    findable: Boolean
    id: ID
    img: String
    marketable: Boolean
    name: String
    price: Int
    quality: Int
    qualityData: objectQualitiesData
    sellable: Boolean
    transportable: Boolean
    type: Int
    typeData: objectTypeData
    updatedAt: String
    usable: Boolean
    wearable: Boolean
}

type objectsListData {
    alias: String
    charges: Int
    comment: String
    comment_master: String
    createdAt: String
    deletedAt: String
    expiry: String
    hidden: Boolean
    id: ID
    img: String
    object: Int
    objectData: objectsData
    owner: Int
    owner_type: Int
    partData: partsData
    quality: Int
    qualityData: objectQualitiesData
    status: Int
    statusData: objectStatusData
    updatedAt: String
    usury: Int
    worn: Boolean
    worn_part: Int
}

type partsData {
    createdAt: String
    deletedAt: String
    description_eng: String
    description_it: String
    icon: String
    id: ID
    max_points: Int
    name: String
    partDamages: [characterDamageData]
    updatedAt: String
}

type percentagesArray {
    find_calc: singlePercentageValues
    furtivity_calc: singlePercentageValues
    initiative_calc: singlePercentageValues
    investigate_calc: singlePercentageValues
    life_calc: singlePercentageValues
    price_calc: singlePercentageValues
    research_calc: singlePercentageValues
    stamina_calc: singlePercentageValues
}

type permissionData {
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    name: String
    permissionGroups: permissionGroupsPivotData
    updatedAt: String
}

type permissionGroupData {
    account: Int
    createdAt: String
    deletedAt: String
    group: Int
    id: ID
    permissionGroupsData: permissionGroupsPivotData
    updatedAt: String
}

type permissionGroupsPivotData {
    createdAt: String
    deletedAt: String
    group: Int
    id: ID
    permission: Int
    updatedAt: String
}

type radioFrequenciesData {
    createdAt: String
    deletedAt: String
    frequency: Int
    id: ID
    name: String
    type: String
    updatedAt: String
}

type radioMessagesData {
    createdAt: String
    deletedAt: String
    frequency: Int
    id: ID
    sender: ID
    senderData: characterData
    text: String
    type: String
    updatedAt: String
}

type singlePercentageValues {
    max_value: Int
    total: Int
}

type statData {
    characterStatData: [characterStatData]
    createdAt: String
    deletedAt: String
    description: descriptionsArray
    id: ID
    max_level: Int
    min_level: Int
    name: String
    registration: Boolean
    updatedAt: String
    upgradable: Boolean
    usable: Boolean
}

type toastResponse {
    response: String!
    responseStatus: String!
}
