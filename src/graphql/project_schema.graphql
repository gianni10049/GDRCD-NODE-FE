# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    registration(email: String!, password: String!, password_confirm: String!, username: String!): genericResponse
    setDamageSolved(damageId: ID!, token: String!): getDamageResponse
    updateAbility(abilityId: ID!, characterId: ID, token: String!): genericResponse
}

type Query {
    chactersListByAccount(token: String!): [characterData]
    getAbility(abilityId: ID!, characterId: ID, token: String!): abilityData
    getCharDamageByPart(characterId: ID!, partId: ID!, token: String!): getDamagesResponse
    getCharacter(characterId: ID, token: String!): characterData
    getCharacterAbility(characterId: ID!, token: String!): getCharacterAbilityResponse
    getCharacterActionPercentages(action: String, characterId: ID!, token: String!): getCharacterActionPercentagesResponse
    getCharacterPoints(characterId: ID!, token: String!): getCharacterPointsResponse
    getCharacterStats(characterId: ID!, token: String!): getCharacterStatsResponse
    getDamage(damageId: ID!, token: String): getDamageResponse
    getPartsList(characterId: ID!, token: String!): getPartsList
    isMineCharacter(characterId: ID!, token: String!): genericResponse
    listStats(token: String!): [statData]
    login(password: String!, username: String!): loginResponse
    permissionControl(permission: String!, token: String!): genericResponse
    recPass(email: String!): toastResponse
    routeControl(account_needed: Boolean, character_needed: Boolean, token: String!): genericResponse
    setCharacter(characterId: ID!, token: String!): loginResponse
}

type abilityData {
    abilityToDetailData: [abilityDetailData]
    castable: Boolean
    characterAbilityData: [characterAbilityData]
    createdAt: String
    createdBy: Int
    deletedAt: String
    description: descriptionsArray
    icon: String
    id: ID
    max_level: Int
    name: String
    stat: ID
    statData: statData
    updatedAt: String
    visible: Boolean
}

type abilityDetailData {
    ability: Int
    abilityData: abilityData
    bonus: Int
    createdAt: String
    createdBy: Int
    deletedAt: String
    description: descriptionsArray
    id: ID
    level: Int
    price: Int
    updatedAt: String
}

type accountData {
    active: Boolean
    charactersData: characterData
    createdAt: String
    deletedAt: String
    email: String
    id: ID
    password: String
    updatedAt: String
    username: String
}

type accountPermissionData {
    account: Int
    accountData: accountData
    assigned_by: Int
    createdAt: String
    deletedAt: String
    id: ID
    permission: Int
    permissionData: permissionData
    updatedAt: String
}

type accountPermissionGroupData {
    account: Int
    createdAt: String
    deletedAt: String
    group: Int
    id: ID
    permissionGroupsData: permissionGroupData
    updatedAt: String
}

type characterAbilityData {
    ability: Int
    abilityData: abilityData
    character: Int
    characterData: characterData
    createdAt: String
    deletedAt: String
    id: ID
    updatedAt: String
    value: Int
}

type characterDamageData {
    character: ID
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    part: ID
    partData: partsData
    points: Int
    solved: Boolean
    title: String
    updatedAt: String
}

type characterData {
    account: Int
    active: Boolean
    age: Int
    characterPermissionData: characterPermissionData
    characterPoints: characterPointsData
    createdAt: String
    deletedAt: String
    id: ID
    mini_avatar: String
    name: String
    nickname: String
    profilePic: String
    surname: String
    updatedAt: String
}

type characterPermissionData {
    assigned_by: Int
    character: Int
    createdAt: String
    deletedAt: String
    id: ID
    permission: Int
    updatedAt: String
}

type characterPointsData {
    character: ID
    createdAt: String
    deletedAt: String
    exp_total: Int
    exp_usable: Int
    id: ID
    life: Int
    stamina: Int
    stat_points: Int
    updatedAt: String
    weight: Int
    resources:Int
}

type characterStatData {
    character: Int
    characterData: characterData
    createdAt: String
    deletedAt: String
    id: ID
    stat: Int
    statData: statData
    updatedAt: String
    value: Int
}

type descriptionsArray {
    eng: String
    it: String
}

type genericResponse {
    response: Boolean!
    responseStatus: String!
}

type getCharacterAbilityResponse {
    response: Boolean
    responseStatus: String
    table: [abilityData]
}

type getCharacterActionPercentagesResponse {
    character: Int
    percentages: percentagesArray
    response: Boolean
    responseStatus: String
}

type getCharacterPointsResponse {
    response: Boolean
    responseStatus: String
    table: characterPointsData
}

type getCharacterStatsResponse {
    response: Boolean
    responseStatus: String
    table: [statData]
}

type getDamageResponse {
    damage: characterDamageData
    response: Int
    responseStatus: String
}

type getDamagesResponse {
    damages: [characterDamageData]
    response: Int
    responseStatus: String
}

type getPartsList {
    response: Int
    responseStatus: String
    table: [partsData]
}

type logMailData {
    attachment: String
    createdAt: String
    deletedAt: String
    from: String
    html: String
    id: ID
    subject: String
    text: String
    to: String
    updatedAt: String
}

type loginResponse {
    response: String!
    responseStatus: String!
    token: String
}

type partsData {
    createdAt: String
    deletedAt: String
    description_eng: String
    description_it: String
    icon: String
    id: ID
    max_points: Int
    name: String
    partDamages: [characterDamageData]
    updatedAt: String
}

type percentagesArray {
    find_calc: singlePercentageValues
    furtivity_calc: singlePercentageValues
    initiative_calc: singlePercentageValues
    investigate_calc: singlePercentageValues
    life_calc: singlePercentageValues
    price_calc: singlePercentageValues
    research_calc: singlePercentageValues
    stamina_calc: singlePercentageValues
}

type permissionData {
    createdAt: String
    deletedAt: String
    description: String
    id: ID
    name: String
    permissionGroups: permissionGroupsPivotData
    updatedAt: String
}

type permissionGroupData {
    account: Int
    createdAt: String
    deletedAt: String
    group: Int
    id: ID
    permissionGroupsData: permissionGroupsPivotData
    updatedAt: String
}

type permissionGroupsPivotData {
    createdAt: String
    deletedAt: String
    group: Int
    id: ID
    permission: Int
    updatedAt: String
}

type singlePercentageValues {
    max_value: Int
    total: Int
}

type statData {
    characterStatData: [characterStatData]
    createdAt: String
    deletedAt: String
    description: descriptionsArray
    id: ID
    max_level: Int
    min_level: Int
    name: String
    registration: Boolean
    updatedAt: String
    upgradable: Boolean
    usable: Boolean
}

type toastResponse {
    response: String!
    responseStatus: String!
}
